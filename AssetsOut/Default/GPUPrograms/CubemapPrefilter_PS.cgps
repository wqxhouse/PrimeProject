#ifndef CUBEMAP_PREFILTER_PS
#define CUBEMAP_PREFILTER_PS
#include "ColoredMinimalMesh_Structs.fx"
#define Pi 3.14159265359

TextureCube<float3> Cubemap : register(t0);
SamplerState LinearSampler : register(s0);

cbuffer ConvolveConsts : register(b0)
{
	uint mipLevel;
	uint numMips;
	uint pad0;
	uint pad1;
}

float radicalInverse_VdC(uint bits) {
	bits = (bits << 16u) | (bits >> 16u);
	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

float2 Hammersley(uint i, uint NumSamples)
{
	return float2((float)i / (float)NumSamples, radicalInverse_VdC(i));
}

float3 ImportanceSampleGGX(float2 Xi, float Roughness, float3 N)
{
	float a = Roughness * Roughness;

	float Phi = 2 * Pi * Xi.x;
	float CosTheta = sqrt((1 - Xi.y) / (1 + (a * a - 1) * Xi.y));
	float SinTheta = sqrt(1 - CosTheta * CosTheta);

	float3 H;
	H.x = SinTheta * cos(Phi);
	H.y = SinTheta * sin(Phi);
	H.z = CosTheta;

	float3 UpVector = abs(N.z) < 0.999f ? float3(0, 0, 1) : float3 (1, 0, 0);
	float3 TangentX = normalize(cross(UpVector, N));
	float3 TangentY = cross(N, TangentX);

	return TangentX * H.x + TangentY * H.y + N * H.z;
}

float3 PrefilterEnvMap( float Roughness, float3 R )
{
	float3 FilteredColor = 0;
	float Weight = 0;
		
	const uint NumSamples = 64;
	for( uint i = 0; i < NumSamples; i++ )
	{
		float2 E = Hammersley( i, NumSamples );
		float3 H = ImportanceSampleGGX( E, Roughness, R );
		float3 L = 2 * dot( R, H ) * H - R;

		float NoL = saturate( dot( R, L ) );
		if( NoL > 0 )
		{
			FilteredColor += Cubemap.SampleLevel(LinearSampler, R, 0) * NoL;
			Weight += NoL;
		}
	}

	return FilteredColor / max( Weight, 0.001 );
}

float4 CubemapPrefilter_PS(COLORED_MINIMAL_MESH_PS_IN pIn)
{
	float3 N = normalize(pIn.iPosOS);
	float roughness = pow(mipLevel / (numMips - 1) + 0.01f, 2);
	return float4(PrefilterEnvMap(roughness, N), 1.0f);
}

PS_wrapper_COLORED_MINIMAL_MESH(CubemapPrefilter_PS)

#endif
